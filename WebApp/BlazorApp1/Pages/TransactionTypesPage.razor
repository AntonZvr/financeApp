@page "/transactionTypes"
@using WebApp.DAL.Models.WebApp.DAL.Models;
@using WebApp.Data.DAL.Models;
@using WebApp.Data.DAL.ViewModels;
@inject HttpClient Http

<h3>Transaction Types</h3>

@if (transactionTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (isEditing)
    {
        <EditForm Model="editingTransactionType" OnValidSubmit="@UpdateTransaction">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="Name" @bind-Value="editingTransactionType.Name" placeholder="Name"></InputText>
            <InputText id="Category" @bind-Value="editingTransactionType.Category" placeholder="Category"></InputText>

            <button type="submit">Save Changes</button>
            <button type="button" @onclick="@(() => isEditing = false)">Cancel</button>
        </EditForm>
    }

    <EditForm Model="newTransactionType" OnValidSubmit="@AddTransaction">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="name" @bind-Value="newTransactionType.Name" placeholder="Name"></InputText>
        <InputText id="category" @bind-Value="newTransactionType.Category" placeholder="Category"></InputText>

        <button type="submit">Add New Transaction Type</button>
    </EditForm>

    <table class='table'>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transactionType in transactionTypes)
            {
                <tr>
                    <td>@transactionType.Id</td>
                    <td>@transactionType.Name</td>
                    <td>@transactionType.Category</td>
                    <td>
                        <button @onclick="() => StartEditingTransaction(transactionType.Id)">Edit</button>
                        <button @onclick="() => DeleteTransaction(transactionType.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private TransactionType[] transactionTypes;
    private TransactionType newTransactionType = new TransactionType();
    TransactionType transactionType = new TransactionType();
    private bool isEditing = false;
    private TransactionType editingTransactionType;

    protected override async Task OnInitializedAsync()
    {
        transactionTypes = await Http.GetFromJsonAsync<TransactionType[]>("https://localhost:7271/api/TransactionType/getTransactionTypes");
    }

    private void StartEditingTransaction(int id)
    {
        var transaction = transactionTypes.First(t => t.Id == id);
        editingTransactionType = new TransactionType
            {
                Id = transaction.Id,
                Name = transaction.Name,
                Category = transaction.Category
            };
        isEditing = true;
    }

    private async Task AddTransaction()
    {
        try
        {
            Console.WriteLine(newTransactionType.Name, newTransactionType.Category);
            HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:7271/api/TransactionType/addTransactionType", newTransactionType);
            response.EnsureSuccessStatusCode(); 

            await OnInitializedAsync(); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding transaction type: {ex.Message}");
        }
    }

    private async Task UpdateTransaction()
    {
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync($"https://localhost:7271/api/TransactionType/editTransactionType/{editingTransactionType.Id}", editingTransactionType);
            response.EnsureSuccessStatusCode();

            await OnInitializedAsync();
            isEditing = false; // Hide the Edit Form
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating transaction: {ex.Message}");
        }
    }

    private async Task DeleteTransaction(int id)
    {
        await Http.DeleteAsync($"https://localhost:7271/api/TransactionType/deleteType/{id}");
        await OnInitializedAsync();
    }
}
