@page "/transactions"
@using System.ComponentModel.DataAnnotations;
@using WebApp.DAL.Models.WebApp.DAL.Models;
@using WebApp.Data.DAL.Models;
@using WebApp.Data.DAL.ViewModels;
@inject HttpClient Http

<h3>Transactions</h3>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (isEditing)
    {
        <EditForm Model="editingTransactionViewModel" OnValidSubmit="@UpdateTransaction">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText id="date" @bind-Value="editingTransactionViewModel.Date" placeholder="Date" />
            <ValidationMessage For="() => editingTransactionViewModel.Date" />
            <InputSelect id="type" @bind-Value="editingTransactionViewModel.Type">
                @foreach (var type in transactionTypes)
                {
                    <option value="@type.Id">@type.Name - @type.Category</option>
                }
            </InputSelect>
            <InputNumber id="amount" @bind-Value="editingTransactionViewModel.Amount" placeholder="Amount"></InputNumber>
            <ValidationMessage For="() => editingTransactionViewModel.Amount" />
            <InputText id="desc" @bind-Value="editingTransactionViewModel.Description" placeholder="Description"></InputText>

            <button type="submit">Save Changes</button>
            <button type="button" @onclick="@(() => isEditing = false)">Cancel</button>
        </EditForm>
    }

    <EditForm Model="newTransactionViewModel" OnValidSubmit="@AddTransaction">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText id="date" @bind-Value="newTransactionViewModel.Date" placeholder="Date" />
        <ValidationMessage For="() => newTransactionViewModel.Date" />
        <InputSelect id="type" @bind-Value="newTransactionViewModel.Type">
            @foreach (var type in transactionTypes)
            {
                <option value="@type.Id">@type.Name - @type.Category</option>
            }
        </InputSelect>
        <InputNumber id="amount" @bind-Value="newTransactionViewModel.Amount" placeholder="Amount"></InputNumber>
        <ValidationMessage For="() => newTransactionViewModel.Amount" />
        <InputText id="desc" @bind-Value="newTransactionViewModel.Description" placeholder="Description"></InputText>

        <button type="submit">Add New Transaction</button>
    </EditForm>
 
    <p>
        @foreach (var error in validationMessages)
        {
            <p>@error</p>    
        }
    </p>

    <table class='table'>
        <thead>
            <tr>
                <th>Category</th>
                <th>Name</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.TransactionType.Category</td>
                    <td>@transaction.TransactionType.Name</td>
                    <td>@transaction.Amount</td>
                    <td>@transaction.Date.ToString("dd-MM-yyyy").Substring(0, 10)</td>
                    <td>@transaction.Description</td>
                    <td>
                        <button @onclick="() => StartEditingTransaction(transaction.TransactionId)">Edit</button> 
                        <button @onclick="() => DeleteTransaction(transaction.TransactionId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Transaction[] transactions;
    private List<TransactionType> transactionTypes;
    private TransactionViewModel newTransactionViewModel = new TransactionViewModel();
    private Transaction newTransaction = new Transaction();
    TransactionType transactionType = new TransactionType();
    private bool isEditing = false;
    private TransactionViewModel editingTransactionViewModel;
    private List<ValidationResult> validationMessages = new List<ValidationResult>();

    protected override async Task OnInitializedAsync()
    {
        transactions = await Http.GetFromJsonAsync<Transaction[]>("https://localhost:7271/api/Transactions/getAllTransactions");
        transactionTypes = await Http.GetFromJsonAsync<List<TransactionType>>("https://localhost:7271/api/TransactionType/getTransactionTypes");
    }

    private void StartEditingTransaction(int id)
    {
        var transaction = transactions.First(t => t.TransactionId == id);
        editingTransactionViewModel = new TransactionViewModel
            {
                TransactionId = transaction.TransactionId,
                Type = transaction.Type,
                Amount = (float)transaction.Amount,
                Date = transaction.Date.ToString().Substring(0, 10),
                Description = transaction.Description,
                TransactionType = transaction.TransactionType
            };
        isEditing = true;
    }

    private async Task AddTransaction()
    {
        try
        {
            validationMessages.Clear();
            if (!DateTime.TryParse(newTransactionViewModel.Date, out _))
            {
                validationMessages.Add(new ValidationResult("Date is in the wrong format.", new[] { nameof(newTransactionViewModel.Date) }));
            }
            if (newTransactionViewModel.Amount < 0)
            {
                validationMessages.Add(new ValidationResult("Amount should be >= 0", new[] { nameof(newTransactionViewModel.Amount) }));
            }
            else
            {
                transactionType.Name = "";
                transactionType.Category = "";
                transactionType.Id = 0;
                newTransactionViewModel.TransactionType = transactionType;
                HttpResponseMessage response = await Http.PostAsJsonAsync("https://localhost:7271/api/Transactions/addTransaction", newTransactionViewModel);
                response.EnsureSuccessStatusCode();

                await OnInitializedAsync();
                newTransactionViewModel = new TransactionViewModel();
            }
        }
        catch (Exception ex)
        {            
            Console.WriteLine($"Error adding transaction: {ex.Message}");
        }
    }

    private async Task UpdateTransaction()
    {
        validationMessages.Clear();
        if (!DateTime.TryParse(editingTransactionViewModel.Date, out _))
        {
            validationMessages.Add(new ValidationResult("Date is in the wrong format.", new[] { nameof(editingTransactionViewModel.Date) }));
        }
        if (editingTransactionViewModel.Amount < 0)
        {
            validationMessages.Add(new ValidationResult("Amount should be >= 0", new[] { nameof(editingTransactionViewModel.Amount) }));
        }
        try
        {
            HttpResponseMessage response = await Http.PutAsJsonAsync($"https://localhost:7271/api/Transactions/editTransaction/{editingTransactionViewModel.TransactionId}", editingTransactionViewModel);
            response.EnsureSuccessStatusCode();

            await OnInitializedAsync();
            if (validationMessages.Count == 0)
            {
                isEditing = false; // Hide the Edit Form
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating transaction: {ex.Message}");
        }
    }

    private async Task DeleteTransaction(int id)
    {
        await Http.DeleteAsync($"https://localhost:7271/api/Transactions/deleteTransaction/{id}");
        await OnInitializedAsync();
    }
}